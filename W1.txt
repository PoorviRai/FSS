runfile('C:/Users/Poorvi Rai/.spyder-py3/W1.py', wdir='C:/Users/Poorvi Rai/.spyder-py3')
Reloaded modules: temp

-----| testingFailure |-----------------------
# this one must fail.. just to
# test if the  unit test system is working
Traceback (most recent call last):
  File "C:/Users/Poorvi Rai/.spyder-py3/W1.py", line 52, in k
    f()
  File "C:/Users/Poorvi Rai/.spyder-py3/W1.py", line 63, in testingFailure
    assert 1==2
AssertionError


-----| testingSuccess |-----------------------
# if this one fails, we have a problem!
# pass

-----| testingWhitespaces |-----------------------
0
Divisible by 2
1
Indivisible by 2
2
Divisible by 2
3
Indivisible by 2
4
Divisible by 2
End of loop
# pass

-----| testingModules |-----------------------
Hello Anaconda
# pass

-----| testingArithmeticandTuplesTogether |-----------------------
a=27 and b=5

Addition = 32 
Subtraction = 22 
Multiplication = 135 
Division = 5.4
# pass

-----| testingFunctions |-----------------------
0 1 1 2 3 5 8 
Sum = 55
# pass

-----| testingStrings |-----------------------
This works
         This too

I'm getting the hang of this.
I think.
Yay!
# pass

-----| testingExceptions |-----------------------

Please enter a number: 
Invalid entry
# pass

-----| testingLists |-----------------------
0 1 2 3 4
Poorvi 10.4 True 7 8 9
range(0, 5) ['Poorvi', 10.4, True, 7, 8, 9]
# pass

-----| testingDictionaryandCounter |-----------------------
{'Harry': 500, 'Ron': 450, 'Hermione': 780}
Counter({'Hermione': 780, 'Harry': 500, 'Ron': 450})
# pass

-----| testingSets |-----------------------
{'mango', 'apple', 'banana', 'pear', 'orange'}
# pass

-----| testingControlFlow |-----------------------
0 is Even
1 is Odd
2 is Even
3 is Odd
4 is Even
5 is Odd
6 is Even
7 is Odd
8 is Even
9 is Odd
10 is Even
# pass

-----| testingTruthiness |-----------------------
False
True
# pass

-----| testingSorting |-----------------------
[5, 19, 22, 45, 67, 239, 456, 888] [888, 456, 239, 67, 45, 22, 19, 5]
# pass

-----| testingListComprehensions |-----------------------
[(0, 0), (0, 1), (0, 4), (0, 9), (0, 16), (1, 0), (1, 1), (1, 4), (1, 9), (1, 16), (2, 0), (2, 1), (2, 4), (2, 9), (2, 16), (3, 0), (3, 1), (3, 4), (3, 9), (3, 16), (4, 0), (4, 1), (4, 4), (4, 9), (4, 16)]
# pass

-----| testingIterators |-----------------------
Mumbai
Pune
Kolkata
Delhi
Bangalore
# pass

-----| testingGenerator |-----------------------
# pass

-----| testingRandomness |-----------------------
[22, 12, 10, 13, 13, 20, 15]
[22, 12, 15, 10, 20, 13, 13]
22
[20, 12, 13]
# pass

-----| testingRegularExpression |-----------------------
[None, <_sre.SRE_Match object; span=(1, 2), match='a'>, True, False, True]
# pass

-----| testingOOP |-----------------------
Name :  Poorvi , ID:  2002
Name :  Sam , ID:  2134
# pass

-----| testingFunctionaltools |-----------------------
8
[1, 8, 27, 64]
<map object at 0x0000020E51B806A0>
<filter object at 0x0000020E51B80710>
# pass

-----| testingEnumerate |-----------------------
[(0, 'Poorvi'), (1, 'Rai'), (2, 'Chetana'), (3, 'Salunke')]
[(1, 'Poorvi'), (2, 'Rai'), (3, 'Chetana'), (4, 'Salunke')]
# pass

-----| testingZipandUnzip |-----------------------
<zip object at 0x0000020E51B8B3C8>
[(1, 2), (2, 3), (4, 5)] (1, 2, 4) (2, 3, 5)
# pass

-----| testingsArgsandKwargs |-----------------------
4
90
24
{'kwargs_1': 'Shark', 'kwargs_2': 4.5, 'kwargs_3': True}
{'my_name': 'Sammy', 'your_name': 'Casey'}
# pass

# pass= 23 fail= 1 %pass = 96%
